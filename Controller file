({
    doInit: function(component, event, helper) {
        component.set("v.chartjsInitialized", false);
    },
    onSelectChartTypeChange: function(component, event, helper) {
        console.log('onSelectChartTypeChange');
        var selectedChartType = event.getSource().get("v.value");
        component.set("v.selectedChartType", selectedChartType);

        // Call the helper function to update the chart based on the selected chart type
        helper.updateChart(component);
    },

    scriptsLoaded: function(component, event, helper) {
        console.log('scriptsLoadedCalled');
        var initialized = component.get("v.chartjsInitialized");
        if (initialized) {
            return;
        }
        var action = component.get("c.getOpportunityRecord");
        action.setCallback(this, function(response){
            var state = response.getState();
            console.log('Server Response State: ', state);
            if (state === 'SUCCESS') {
                let respnse = response.getReturnValue();
                console.log('Server Response Data: ', respnse);
                var labelSet = [];
                var dataSet = [];
                var amountSet = [];
                respnse.forEach(function(key) {
                    labelSet.push(key.label);
                    dataSet.push(key.Count);
                    amountSet.push(key.Amount);
                });
                var chartData = {
                    labels: labelSet,
                    datasets: [
                        {
                            label: "Opportunity Count",
                            data: dataSet,
                            backgroundColor: [
                                'rgba(225, 68, 149, 0.8)',
                                'rgba(218, 38, 216, 0.8)',
                                'rgba(141, 38, 218, 0.8)',
                                'rgba(38, 218, 208, 0.8)',
                                'rgba(218, 130, 38, 0.8)',
                                'rgba(101, 227, 22, 0.8)',
                                'rgba(220, 77, 51, 0.8)',
                                'rgba(220, 0, 51, 0.8)',
                                'rgba(45, 101, 59, 0.8)',
                                'rgba(60, 58, 30, 0.8)'
                            ], 
                            borderColor: [
                                'rgb(255, 99, 132)',
                                'rgb(255, 159, 64)',
                                'rgb(255, 205, 86)',
                                'rgb(75, 192, 192)',
                                'rgb(54, 162, 235)',
                                'rgb(153, 102, 255)',
                                'rgb(201, 203, 207)'
                            ],
                            hoverBackgroundColor: [
                                "rgba(225, 68, 149, 0.8)",
                                "#36A2EC",
                                "#FFCE56"
                            ],
                            borderWidth: 2
                        },
                        {
                            label: "Total Amount",
                            data: amountSet,
                            backgroundColor: [
                                'rgba(26, 104, 49, 0.8)',
                                'rgba(218, 38, 216, 0.8)',
                                'rgba(141, 38, 218, 0.8)',
                                'rgba(38, 218, 208, 0.8)',
                                'rgba(218, 130, 38, 0.8)',
                                'rgba(101, 227, 22, 0.8)',
                                'rgba(220, 77, 51, 0.8)',
                                'rgba(220, 0, 51, 0.8)',
                                'rgba(45, 101, 59, 0.8)',
                                'rgba(60, 58, 30, 0.8)'
                            ], 
                            borderColor: [
                                'rgb(255, 99, 132)',
                                'rgb(255, 159, 64)',
                                'rgb(255, 205, 86)',
                                'rgb(75, 192, 192)',
                                'rgb(54, 162, 235)',
                                'rgb(153, 102, 255)',
                                'rgb(201, 203, 207)'
                            ],
                            hoverBackgroundColor: [
                                "rgba(26, 104, 49, 0.8)",
                                "rgba(244, 107, 78, 0.7)",
                                "rgba(125, 28, 100, 0.7)",
                                "rgba(145, 14, 57, 0.7)"
                            ], 
                            borderWidth: 2
                        }
                    ]
                };
                
                var options = {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    var dataIndex = context.dataIndex;
                                    var count = context.chart.data.datasets[0].data[dataIndex];
                                    var amount = context.chart.data.datasets[1].data[dataIndex];
                                    var formattedAmount = helper.formatAmount(amount); // Use the helper method to format the amount

                                    var values = [
                                        'Opportunity Count: ' + count,
                                        'Total Amount: ' + formattedAmount
                                    ];
                                    return values;
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            ticks: {
                                callback: function(value, index, values) {
                                    return helper.formatAmount(value); // Format the y-axis tick labels using the helper function
                                }
                            }
                        }
                    }
                };
                
                component.set("v.chartData", chartData);
                component.set("v.chartOptions", options);
                helper.updateChart(component);
            }
        });
        $A.enqueueAction(action);
    }
})
